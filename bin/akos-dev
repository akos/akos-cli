#!/usr/bin/env node

const checker = require('../lib/checker');

const path = require('path');
const opn = require('opn');
const webpackDevMiddleware = require('koa-webpack-dev-middleware');
const webpackHotMiddleware = require('koa-webpack-hot-middleware');

/**
 * Parse Commands
 */
const program = require('commander');
program
    .option('-o, --open-browser', 'Open browser when start server')
    .option('-h, --host <host>', 'Web Server Host')
    .option('-p, --port <port>', 'Web Server Port', parseInt)
    .parse(process.argv);

if (!checker.checkNode())
    process.exit(1);
checker.checkUpgrade();

/**
 * Execute Task
 */
process.env.NODE_ENV = 'development';
const akosConfig = global.akosConfig = require('../config/resolve')();
const vusionConfig = global.vusionConfig = require('vusion-cli/config/resolve')();

if (program.port)
    akosConfig.port = program.port;
const port = akosConfig.port;
if (program.host)
    akosConfig.host = program.host;
const host = akosConfig.host || 'localhost';
const url = `http://${host}:${port}`;

const entryPath = path.resolve(process.cwd(), akosConfig.entry);
const app = require(entryPath)(akosConfig);

// Apply webpack middlewares
const { compiler, devOptions } = require('vusion-cli/lib/dev').prepare(require('vusion-cli/webpack/' + vusionConfig.type));

// Auto redirect entry page url
if (vusionConfig.entry && vusionConfig.entry.pages) {
    let pages = vusionConfig.entry.pages;
    if (!Array.isArray(pages))
        pages = [pages];
    let indexUrl;
    const urls = pages.map((page) => {
        const url = path.join(vusionConfig.output.publicPath, page);
        if (page === 'index')
            indexUrl = url;
        return url;
    });
    app.use(async (ctx) => {
        if (ctx.url === '/')
            indexUrl && (ctx.url = indexUrl);
        else {
            const index = urls.indexOf(ctx.url);
            ~index && (ctx.url = urls[index]);
        }
    })
}

app.use(webpackDevMiddleware(compiler, devOptions));
app.use(webpackHotMiddleware(compiler));

app.listen(port, host, (err) => {
    if (err)
        return console.error(err);

    if (program.openBrowser)
        opn(url);

    console.info(`Server listen on ${port}`);
});
