#!/usr/bin/env node

const checker = require('../lib/checker');

const path = require('path');
const opn = require('opn');
const mount = require('koa-mount');
const serve = require('koa-static');
const htmlWebpackUrlMiddleware = require('../lib/html-webpack-url-middleware');

/**
 * Parse Commands
 */
const program = require('commander');
program
    .option('-o, --open-browser', 'Open browser when start server')
    .option('-h, --host <host>', 'Web Server Host')
    .option('-p, --port <port>', 'Web Server Port', parseInt)
    .parse(process.argv);

if (!checker.checkNode())
    process.exit(1);
checker.checkUpgrade();

/**
 * Execute Task
 */
const akosConfig = global.akosConfig = require('../config/resolve')();
const vusionConfig = global.vusionConfig = require('vusion-cli/config/resolve')();

if (program.port)
    akosConfig.port = program.port;
const port = akosConfig.port;
if (program.host)
    akosConfig.host = program.host;
const host = akosConfig.host || 'localhost';
const url = `http://${host}:${port}`;

const entryPath = path.resolve(process.cwd(), akosConfig.entry);
const app = require(entryPath)(akosConfig);

// Auto redirect entry page url
if (vusionConfig.entry && vusionConfig.entry.pages) {
    app.use(htmlWebpackUrlMiddleware(
        vusionConfig.entry.pages,
        akosConfig.base || '/',
        vusionConfig.webpack.output.publicPath,
    ));
}

app.use(mount(vusionConfig.webpack.output.publicPath, serve(vusionConfig.webpack.output.path), {
    maxage: 1000 * 60 * 60 * 1,
}));

app.listen(port, (err) => {
    if (err)
        return console.error(err);

    if (program.openBrowser)
        opn(url);

    console.info(`Server listen on ${port}`);
});
